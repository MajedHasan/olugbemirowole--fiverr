generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  email        String?       @unique
  name         String?
  password     String
  role         Role          @default(ENROLLEES)
  Enrollee     Enrollee?
  HMO          HMO?
  Hospital     Hospital?
  Organisation Organisation?
  posts        Post[]
}

model Enrollee {
  id             Int         @id @default(autoincrement())
  fullName       String
  policyNo       String
  company        String
  planType       String
  phoneNumber    String
  status         Status      @default(ACTIVE)
  hospital       String
  noOfDependents Int
  userId         Int?        @unique
  dependents     Dependent[]
  user           User?       @relation(fields: [userId], references: [id])
}

model Dependent {
  id         Int      @id @default(autoincrement())
  name       String
  enrolleeId Int
  enrollee   Enrollee @relation(fields: [enrolleeId], references: [id])

  @@index([enrolleeId], map: "Dependent_enrolleeId_fkey")
}

model Hospital {
  id                    Int                    @id @default(autoincrement())
  email                 String?
  hospitalAddress       String
  hospitalName          String
  phoneNumber           String
  userId                Int?                   @unique
  authorizationRequests AuthorizationRequest[] @relation("HospitalRequests")
  claimRequests         ClaimRequest[]         @relation("HospitalClaims")
  user                  User?                  @relation(fields: [userId], references: [id])
}

model Organisation {
  id                   Int    @id @default(autoincrement())
  companyName          String
  companyID            String
  phoneNumber          String
  email                String
  clientServiceOfficer String
  userId               Int?   @unique
  user                 User?  @relation(fields: [userId], references: [id])
}

model HMO {
  id                   Int                    @id @default(autoincrement())
  email                String
  permissions          Permission
  phoneNumber          String
  userId               Int?                   @unique
  AuthorizationRequest AuthorizationRequest[]
  ClaimRequest         ClaimRequest[]
  user                 User?                  @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
}

model Diagnosis {
  id                    Int                    @id @default(autoincrement())
  name                  String
  description           String?
  code                  String                 @unique
  authorizationRequests AuthorizationRequest[] @relation("DiagnosisRequests_Authorization")
  claimRequests         ClaimRequest[]         @relation("DiagnosisRequests_Claims")
}

model Treatment {
  id                    Int                    @id @default(autoincrement())
  description           String?
  price                 Float
  isApprovalRequired    Boolean
  name                  String
  authorizationRequests AuthorizationRequest[] @relation("TreatmentRequests_Authorization")
  claimRequests         ClaimRequest[]         @relation("TreatmentRequests_Claims")
}

model Drugs {
  id                        Int                         @id @default(autoincrement())
  description               String?
  price                     Float
  name                      String
  isApprovalRequired        Boolean
  group                     String
  authorizationRequestDrugs AuthorizationRequestDrugs[]
  claimRequestDrugs         ClaimRequestDrugs[]
}

model AuthorizationRequestDrugs {
  id                     Int                  @id @default(autoincrement())
  drugId                 Int
  quantity               Float
  authorizationRequestId Int
  authorizationRequest   AuthorizationRequest @relation(fields: [authorizationRequestId], references: [id])
  drugs                  Drugs                @relation(fields: [drugId], references: [id])

  @@index([authorizationRequestId], map: "AuthorizationRequestDrugs_authorizationRequestId_fkey")
  @@index([drugId], map: "AuthorizationRequestDrugs_drugId_fkey")
}

model ClaimRequestDrugs {
  id                     Int          @id @default(autoincrement())
  drugId                 Int
  quantity               Float
  claimRequestId Int
  claimRequest           ClaimRequest @relation(fields: [claimRequestId], references: [id])
  drugs                  Drugs        @relation(fields: [drugId], references: [id])

  @@index([claimRequestId], map: "ClaimRequestDrugs_claimRequestId_fkey")
  @@index([drugId], map: "ClaimRequestDrugs_drugId_fkey")
}

model AuthorizationRequest {
  id                        Int                         @id @default(autoincrement())
  policyNo                  String
  healthPlan                String
  treatmentCost             Float
  receipt                   String?
  hospitalEmail             String
  hospitalPhone             String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  hospitalId                Int
  hospitalName              String
  enrollee                  String
  submitedBy                String
  responsedBy               Int?
  status                    String                      @default("PENDING")
  submiterId                Int
  hospital                  Hospital                    @relation("HospitalRequests", fields: [hospitalId], references: [id])
  hmo                       HMO?                        @relation(fields: [responsedBy], references: [id])
  authorizationRequestDrugs AuthorizationRequestDrugs[]
  diagnosis                 Diagnosis[]                 @relation("DiagnosisRequests_Authorization")
  treatments                Treatment[]                 @relation("TreatmentRequests_Authorization")

  @@index([responsedBy], map: "AuthorizationRequest_responsedBy_fkey")
  @@index([hospitalId], map: "TreatmentRequest_hospitalId_fkey")
}

model ClaimRequest {
  id                Int                 @id @default(autoincrement())
  policyNo          String
  healthPlan        String
  treatmentCost     Float
  receipt           String?
  hospitalEmail     String
  hospitalPhone     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  hospitalId        Int
  hospitalName      String
  enrollee          String
  submiterId        Int
  submitedBy        String
  responsedBy       Int?
  status            String              @default("ACCEPTED")
  comment           String?
  hospital          Hospital            @relation("HospitalClaims", fields: [hospitalId], references: [id])
  hmo               HMO?                @relation(fields: [responsedBy], references: [id])
  claimRequestDrugs ClaimRequestDrugs[]
  diagnosis         Diagnosis[]         @relation("DiagnosisRequests_Claims")
  treatments        Treatment[]         @relation("TreatmentRequests_Claims")

  @@index([hospitalId], map: "TreatmentRequest_hospitalId_fkey")
  @@index([responsedBy], map: "ClaimRequest_responsedBy_fkey")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ENROLLEES
  HOSPITAL
  ORGANISATION
  HMO
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Permission {
  ADMIN
  ACCOUNT
  CLAIMS_DEPARTMENT
  CUSTOMER_CARE
}
